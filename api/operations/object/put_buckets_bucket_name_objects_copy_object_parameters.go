// Code generated by go-swagger; DO NOT EDIT.

// This file is part of MinIO Console Server
// Copyright (c) 2023 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

package object

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewPutBucketsBucketNameObjectsCopyObjectParams creates a new PutBucketsBucketNameObjectsCopyObjectParams object
//
// There are no default values defined in the spec.
func NewPutBucketsBucketNameObjectsCopyObjectParams() PutBucketsBucketNameObjectsCopyObjectParams {

	return PutBucketsBucketNameObjectsCopyObjectParams{}
}

// PutBucketsBucketNameObjectsCopyObjectParams contains all the bound params for the put buckets bucket name objects copy object operation
// typically these are obtained from a http.Request
//
// swagger:parameters PutBucketsBucketNameObjectsCopyObject
type PutBucketsBucketNameObjectsCopyObjectParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	BucketName string
	/*
	  Required: true
	  In: query
	*/
	Source string
	/*
	  Required: true
	  In: query
	*/
	Target string
	/*
	  Required: true
	  In: query
	*/
	TargetBucket string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPutBucketsBucketNameObjectsCopyObjectParams() beforehand.
func (o *PutBucketsBucketNameObjectsCopyObjectParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rBucketName, rhkBucketName, _ := route.Params.GetOK("bucket_name")
	if err := o.bindBucketName(rBucketName, rhkBucketName, route.Formats); err != nil {
		res = append(res, err)
	}

	qSource, qhkSource, _ := qs.GetOK("source")
	if err := o.bindSource(qSource, qhkSource, route.Formats); err != nil {
		res = append(res, err)
	}

	qTarget, qhkTarget, _ := qs.GetOK("target")
	if err := o.bindTarget(qTarget, qhkTarget, route.Formats); err != nil {
		res = append(res, err)
	}

	qTargetBucket, qhkTargetBucket, _ := qs.GetOK("target_bucket")
	if err := o.bindTargetBucket(qTargetBucket, qhkTargetBucket, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindBucketName binds and validates parameter BucketName from path.
func (o *PutBucketsBucketNameObjectsCopyObjectParams) bindBucketName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.BucketName = raw

	return nil
}

// bindSource binds and validates parameter Source from query.
func (o *PutBucketsBucketNameObjectsCopyObjectParams) bindSource(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("source", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("source", "query", raw); err != nil {
		return err
	}
	o.Source = raw

	return nil
}

// bindTarget binds and validates parameter Target from query.
func (o *PutBucketsBucketNameObjectsCopyObjectParams) bindTarget(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("target", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("target", "query", raw); err != nil {
		return err
	}
	o.Target = raw

	return nil
}

// bindTargetBucket binds and validates parameter TargetBucket from query.
func (o *PutBucketsBucketNameObjectsCopyObjectParams) bindTargetBucket(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("target_bucket", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("target_bucket", "query", raw); err != nil {
		return err
	}
	o.TargetBucket = raw

	return nil
}
